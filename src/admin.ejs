<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Admin Panel</title>
  <link rel="stylesheet" href="style.css" />
</head>

<body class="bg-slate-950 text-xl flex w-full min-h-screen text-white p-7 flex-row flex-wrap">
  <div id="popup"
    class="border-solid border-2 border-gray-400 w-auto p-3 top-10 bg-blue-700 translate-x-100 max-w-56 z-50 my-10 font-sans font-semibold fixed text-white right-0 rounded-md transition-all duration-300 md:text-lg md:p-4 md:max-w-72">
    MESSAGE
  </div>

  <h1 class="text-3xl font-bold  text-center w-screen">MailNews Admin Panel</h1>
  <!-- GRID 1 -->
  <div class="grid grid-flow-row md:grid-flow-col md:grid-cols-2 w-full gap-8 my-14">
    <div class="w-full flex flex-col gap-3 flex-wrap h-fit">
      <h1 class="text-3xl font-semibold w-full">Subscribers</h1>
      <div class="w-full grid grid-cols-2 gap-3">
        <div class="w-full h-full bg-slate-800 bg-opacity-55 text-white rounded-lg p-2 font-semibold text-lg">
          Total Subs: <%= totalSubscribers %>
        </div>
        <div class="w-full h-full bg-slate-800 bg-opacity-55 text-white rounded-lg p-2 font-semibold text-lg">
          Subs/Day: <span id="subperday"></span>
        </div>
        <div class="w-full h-full bg-slate-800 bg-opacity-55 text-white rounded-lg p-2 font-semibold text-lg">
          Subs in 15 Days: <span id="last15"></span>
        </div>
        <div class="w-full h-full bg-slate-800 bg-opacity-55 text-white rounded-lg p-2 font-semibold text-lg">
          Subs/Day: <span id="subperday"></span>
        </div>
      </div>
      <div class="w-full">
        <canvas id="subsChart" class="w-1/2 h-1/2 fill-white !min-h-60 "></canvas>
      </div>
      <div class="flex justify-center" onchange="UpdateChart()">
        <select name="time" id="subsChart"
          class="bg-slate-800 rounded-xl text-white px-5 text-base py-2 w-fit font-semibold">
          <option value="week">Last Week</option>
          <option value="15Days" selected>Last 15 Days</option>
          <option value="month">Last Month</option>
        </select>
      </div>
    </div>

    <div class="w-full flex flex-col gap-3 flex-wrap h-fit text-left">
      <h1 class="text-3xl font-semibold block">Topics</h1>
      <div class="w-11/12 max-h-full flex items-center justify-center">
        <canvas id="topicTotalChart" class="w-max fill-white"></canvas>
      </div>
    </div>
  </div>
  <!-- GRID 2 -->
  <div class="w-full">
    <h1 class="text-3xl font-semibold ">Slot Wise Email Timings</h1>
    <div class="grid grid-cols-3 w-full gap-x-10">
      <div class="w-full col-span-3 md:col-span-2">
        <canvas id="timeSlotChartArea" class='w-full h-36'></canvas>
      </div>
      <div class="text-white col-span-3 md:col-span-1 mt-8 md:mt-0 h-full">
        <table class="!border-white w-full text-center rounded-s-md h-full">
          <thead class="h-1/6">

            <tr>
              <th class="bg-slate-800 w-1/2 border-white border-2 ">Top Slots</th>
              <th class="bg-slate-800 w-1/2 border-white border-2 ">Count</th>
            </tr>
          </thead>
          <% for (var obj of (Object.entries(emailSlots).sort((a, b)=> b[1] - a[1]).slice(0,5))) { %>
            <tr>
              <td class="border-white border-2 ">
                <%= obj[0] %>
              </td>
              <td class="border-white border-2 ">
                <%= obj[1] %>
              </td>
            </tr>
            <% } %>
              </tbody>
        </table>
      </div>
    </div>

  </div>

  <!-- GRID 3 -->
  <div class="w-full my-12">
    <h1 class="text-3xl font-semibold mb-6 ">Querys and Issues Raised</h1>
    <%- include('QueryDisplay.ejs', {querytitle:'Mereko EMail Nhi Aa Raha Sir', id:"82990010" , date:"2024-05-5",
      name:"Aryansh", email:"aryansh@dd.ss"}) %>
  </div>
</body>

</html>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  var subsChartDisplay = document.getElementById('subsChart');
  var topicPieChart = document.getElementById("topicTotalChart");
  var slotChart = document.getElementById("timeSlotChartArea");
  //Arranging DateWise Subs Data from Server
  var DateWiseSubs = {};
      <% for (var dos in subscribers) {  %>
    DateWiseSubs['<%= dos %>'] = <%=  subscribers[dos] %>;
          <% }; %>


    function getLastNDates(n) {
      const datesArray = [];
      const currentDate = new Date();

      for (let i = 0; i < n; i++) {
        const date = new Date();
        date.setDate(currentDate.getDate() - i);
        datesArray.push(date);
      }

      return datesArray.map(date => date.toISOString().split('T')[0]);
    }


  //Data Preperation For Subscribers Chart
  //#region

  var last15DaysCount = 0;
  var DateWiseOutput = {}
  for (var date of getLastNDates(15)) {
    DateWiseOutput[date] = `${(DateWiseSubs[date] ? DateWiseSubs[date] : 0)}`;
    last15DaysCount += (DateWiseSubs[date] ? DateWiseSubs[date] : 0)
  }

  document.querySelector("#last15").innerText = last15DaysCount

  DateWiseOutput = Object.keys(DateWiseOutput)
    .sort()
    .reduce((accumulator, key) => {
      console.log(key)
      accumulator[key] = DateWiseOutput[key];
      return accumulator;
    }, {});

  document.getElementById('subperday').innerText = (<%= totalSubscribers %> / Object.keys(DateWiseSubs).length).toFixed(2);
  //#endregion

  var topicsDataProcessed = {}
    <% for (var dos in topicsData) {  %>
      topicsDataProcessed['<%= dos %>'] = <%=  topicsData[dos] %>;
          <% }; %>

          
  var slotDataProcessed = {}
    <% for (var i = 0; i < 49; i++) { %>
      slotDataProcessed[<%= i %>] = <%= emailSlots[i] ? emailSlots[i] : 0 %>;
        <% } %>

    function UpdateChart() {
      console.log(document.querySelector('select').value)
      switch (document.querySelector('select').value) {
        case "week":

          {
            var DateWiseOutput = {}
            subsChart.destroy();
            for (var date of getLastNDates(7)) {
              DateWiseOutput[date] = `${(DateWiseSubs[date] ? DateWiseSubs[date] : 0)}`;

            }
            DateWiseOutput = Object.keys(DateWiseOutput)
              .sort()
              .reduce((accumulator, key) => {
                console.log(key)
                accumulator[key] = DateWiseOutput[key];
                return accumulator;
              }, {});
            drawSubsChart(DateWiseOutput);
            break;
          }

        case "15Days":
          {
            var DateWiseOutput = {}
            subsChart.destroy();
            for (var date of getLastNDates(15)) {
              DateWiseOutput[date] = `${(DateWiseSubs[date] ? DateWiseSubs[date] : 0)}`;
              console.log(DateWiseOutput)
            }
            DateWiseOutput = Object.keys(DateWiseOutput)
              .sort()
              .reduce((accumulator, key) => {
                console.log(key)
                accumulator[key] = DateWiseOutput[key];
                return accumulator;
              }, {});
            drawSubsChart(DateWiseOutput);
            break;
          }

        case "month":
          {
            var DateWiseOutput = {}
            subsChart.destroy();
            for (var date of getLastNDates(30)) {
              DateWiseOutput[date] = `${(DateWiseSubs[date] ? DateWiseSubs[date] : 0)}`;
              console.log(DateWiseOutput)
            }
            DateWiseOutput = Object.keys(DateWiseOutput)
              .sort()
              .reduce((accumulator, key) => {
                console.log(key)
                accumulator[key] = DateWiseOutput[key];
                return accumulator;
              }, {});
            drawSubsChart(DateWiseOutput);
            break;
          }

        default:
          break;
      }
    }


  // Setting Up Charts
  var subsChart;

  function drawSubsChart(DateWiseOutput) {
    subsChart = new Chart(subsChartDisplay, {
      type: 'line',

      data:
      {
        options: {

          legend: {
            labels: {

              fontColor: 'white'
            }
          }
        },
        labels: Object.keys(DateWiseOutput),

        datasets: [
          {
            label: 'Subscribers',
            fill: true,
            lineTension: 0.25,
            backgroundColor: '#16a34a2a',
            borderColor: '#16a34a',
            data: Object.values(DateWiseOutput),
          }]
      },


    })

  }
  drawSubsChart(DateWiseOutput)

  Chart.defaults.color = 'white';
  var topicsChart = new Chart(topicPieChart, {
    type: "doughnut",
    data: {
      datasets: [{
        data: Object.values(topicsDataProcessed)
      }],
      labels: Object.keys(topicsDataProcessed)
    },
    options: {
      plugins: {
        legend: {
          display: true,
          position: 'bottom',
          labels: {
            usePointStyle: true
          }
        },

      }
    }
  })


  var EmailSlotChart = new Chart(slotChart, {
    type: "bar",
    data: {
      datasets: [
        {
          label: 'Subscribers',
          fill: true,
          lineTension: 0.25,
          backgroundColor: 'cyan',
          data: Object.values(slotDataProcessed),
        }],
      labels: Object.keys(slotDataProcessed)
    },
  })

  // Reply JS 

  function submitReply(id){
    fetch("/reply", {
      method: "POST",
          body: new URLSearchParams({ queryID: id}),
          headers: {
            "Content-Type": "application/x-www-form-urlencoded",
          },
    }).then(res=>{
      if(res.status == 200){
        showPopup("Replied Successfully", "info");
      }
      else if(res.status == 404){
        showPopup("Complaint With This ID Not Found", "err")
      }
      else if(res.status == 500){
        showPopup("Some Error Occurred in Server", "err")
      }   else if(res.status == 401){
        setTimeout(() => {
          showPopup("Re-Login", "warn")
        }, 2000);
      }
    })
  }

  //POPUP JS

  var currentPopUpTimeoutID;
  function showPopup(textMessage, type = "info", durartion = 5000) {
    clearTimeout(currentPopUpTimeoutID);
    if (type === "err") {
      popup.style.backgroundColor = "rgb(153, 27, 27)";
    } else if (type === "info") {
      popup.style.backgroundColor = "rgb(29, 78, 216)";
    } else if (type === "warn") {
      popup.style.backgroundColor = "rgb(202, 138, 4)";
    }
    popup.textContent = textMessage;
    popup.classList.add("mr-7");
    popup.classList.remove("translate-x-100");

    currentPopUpTimeoutID = setTimeout(() => {
      popup.classList.remove("mr-7");
      popup.classList.add("translate-x-100");
    }, durartion);
  }

</script>